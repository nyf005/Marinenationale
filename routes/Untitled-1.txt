// Formulaire d'ajout des membres
router.get("/add", ensureAuthenticated, (req, res) => {
  permission = checkGrant(req.user.statut, "createAny", "account", req, res);
  if (permission) {
    Rank.find()
      .sort({ ordre: "asc" })
      .then(ranks => {
        Unite.find().then(unites => {
          Service.find().then(services => {
            res.render("users/add", {
              ranks: ranks,
              unites: unites,
              services: services
            });
          });
        });
      });
  }
});

// Traitement du formulaire d'ajout de membre
router.post("/add", ensureAuthenticated, (req, res) => {
  permission = checkGrant(req.user.statut, "createAny", "account", req, res);
  if (permission) {
    let errors = [];

    if (!req.body.mecano) {
      errors.push({
        text: `Veuillez entrer le mécano du marin`
      });
    }

    if (!req.body.matricule) {
      errors.push({
        text: `Veuillez entrer le matricule du marin`
      });
    }

    if (!req.body.grade) {
      errors.push({
        text: `Veuillez sélectionner le grade du marin`
      });
    }

    if (!req.body.nom) {
      errors.push({
        text: `Veuillez entrer le nom du marin`
      });
    }

    if (!req.body.prenoms) {
      errors.push({
        text: `Veuillez entrer le ou les prénoms du marin`
      });
    }

    if (!req.body.genre) {
      errors.push({
        text: "Veuillez sélectionner le genre du marin"
      });
    }

    if (!req.body.dateNaiss) {
      errors.push({
        text: "Veuillez sélectionner la date de naissance du marin"
      });
    }

    if (!req.body.lieuNaiss) {
      errors.push({
        text: "Veuillez saisir le lieu de naissance du marin"
      });
    }

    if (!req.body.pere) {
      errors.push({
        text: "Veuillez saisir le nom complet du père du marin"
      });
    }

    if (!req.body.mere) {
      errors.push({
        text: "Veuillez saisir le nom complet de la mère du marin"
      });
    }

    if (!req.body.dateEntreeService) {
      errors.push({
        text: "Veuillez sélectionner la date d'entrée en service du marin"
      });
    }

    if (!req.body.dateNomination) {
      errors.push({
        text:
          "Veuillez sélectionner la date de nomination au grade actuel du marin"
      });
    }

    if (!req.body.unite) {
      errors.push({
        text: "Veuillez sélectionner l'unité du marin"
      });
    }

    if (!req.body.service) {
      errors.push({
        text: "Veuillez sélectionner le service du marin"
      });
    }

    if (errors.length > 0) {
      Rank.find()
        .sort({ ordre: "asc" })
        .then(ranks => {
          Unite.find().then(unites => {
            Service.find().then(services => {
              res.render("users/add", {
                errors: errors,
                ranks: ranks,
                unites: unites,
                services: services,
                genre: req.body.genre,
                mecano: req.body.mecano,
                matricule: req.body.matricule,
                grade: req.body.grade,
                nom: req.body.nom.toUpperCase(),
                prenoms: toTitleCase(req.body.prenoms),
                statut: req.body.statut,
                dateNaiss: req.body.dateNaiss,
                lieuNaiss: req.body.lieuNaiss,
                pere: req.body.pere.toUpperCase(),
                mere: req.body.mere.toUpperCase(),
                dateEntreeService: req.body.dateEntreeService,
                dateNomination: req.body.dateNomination,
                unite: req.body.unite,
                service: req.body.service
              });
            });
          });
        });
    } else {
      User.findOne({
        mecano: req.body.mecano
      }).then(user => {
        if (user) {
          req.flash(
            "errors_msg",
            "Ce mécano est déja enregistré dans la base de données"
          );
          res.redirect("/users/add");
        } else {
          const newUser = {
            mecano: req.body.mecano,
            matricule: req.body.matricule,
            grade: req.body.grade,
            nom: req.body.nom.toUpperCase(),
            prenoms: toTitleCase(req.body.prenoms),
            statut: req.body.statut,
            genre: req.body.genre,
            naissance: {
              date: req.body.dateNaiss,
              lieu: req.body.lieuNaiss
            },
            parents: {
              pere: req.body.pere.toUpperCase(),
              mere: req.body.mere.toUpperCase()
            },
            dateEntreeService: req.body.dateEntreeService,
            dateNomination: req.body.dateNomination,
            unite: req.body.unite,
            service: req.body.service
          };

          new User(newUser).save().then(user => {
            req.flash("success_msg", "Nouveau membre ajouté");
            res.redirect("/users/add");
          });
        }
      });
    }
  }
});





router.put("/register/:id", upload.single("photo"), (req, res) => {
  let errors = [];
  if (!req.body.genre) {
    errors.push({
      text: "Veuillez sélectionner votre genre"
    });
  }

  if (!req.body.dateNaiss) {
    errors.push({
      text: "Veuillez sélectionner votre date de naissance"
    });
  }

  if (!req.body.lieuNaiss) {
    errors.push({
      text: "Veuillez saisir votre lieu de naissance"
    });
  }

  if (!req.body.pere) {
    errors.push({
      text: "Veuillez saisir le nom complet de votre père"
    });
  }

  if (!req.body.mere) {
    errors.push({
      text: "Veuillez saisir le nom complet de votre mère"
    });
  }

  if (!req.body.dateEntreeService) {
    errors.push({
      text: "Veuillez sélectionner votre date d'entrée en service"
    });
  }

  if (!req.body.dateNomination) {
    errors.push({
      text: "Veuillez sélectionner votre date de nomination au grade actuel"
    });
  }

  if (!req.body.unite) {
    errors.push({
      text: "Veuillez sélectionner votre unité"
    });
  }

  if (!req.body.service) {
    errors.push({
      text: "Veuillez sélectionner votre service"
    });
  }

  if (!req.body.password) {
    errors.push({
      text: "Vous devez obligatoirement définir votre mot de passe"
    });
  }

  if (req.body.password.length < 8) {
    errors.push({
      text: "Votre mot de passe doit contenir au moins 8 caractères"
    });
  }

  if (req.body.password !== req.body.confirm_password) {
    errors.push({
      text: "Vos mots de passe ne sont pas cohérents"
    });
  }

  User.findOne({
    _id: req.params.id
  })
    .populate("unite")
    .populate("service")
    .then(user => {
      permission = checkGrant(user.statut, "updateOwn", "account", req, res);
      if (permission) {
        Unite.find().then(unites => {
          Service.find().then(services => {
            if (errors.length > 0) {
              if (req.file) {
                cloudinary.v2.uploader.destroy(req.file.public_id);
              }
              res.render("users/edit", {
                errors: errors,
                user: user,
                unites: unites,
                services: services,
                genre: req.body.genre,
                dateNaiss: req.body.dateNaiss,
                lieuNaiss: req.body.lieuNaiss,
                pere: req.body.pere.toUpperCase(),
                mere: req.body.mere.toUpperCase(),
                dateEntreeService: req.body.dateEntreeService,
                dateNomination: req.body.dateNomination,
                unite: req.body.unite,
                service: req.body.service,
                password: req.body.password,
                confirm_password: req.body.confirm_password
              });
            } else {
              user.genre = req.body.genre;
              user.naissance.date = req.body.dateNaiss;
              user.naissance.lieu = req.body.lieuNaiss;
              user.parents.pere = req.body.pere.toUpperCase();
              user.parents.mere = req.body.mere.toUpperCase();
              user.dateEntreeService = req.body.dateEntreeService;
              user.dateNomination = req.body.dateNomination;
              user.unite = req.body.unite;
              user.service = req.body.service;
              if (req.file) {
                cloudinary.v2.uploader.destroy(user.photo.id);
                user.photo.id = req.file.public_id;
                user.photo.url = req.file.url;
                user.photo.format = req.file.format;
              }
              if (req.body.password === user.password) {
                user.save().then(user => {
                  req.flash(
                    "success_msg",
                    "Modifications effectuées avec succès"
                  );
                  res.redirect(`/users/edit/${user.id}`);
                });
              } else {
                bcrypt.genSalt(10, (err, salt) => {
                  bcrypt.hash(req.body.password, salt, (err, hash) => {
                    if (err) throw err;
                    user.password = hash;
                    user.save().then(user => {
                      req.flash(
                        "success_msg",
                        "Vos informations ont été enregistrées avec succès. Vous pouvez vous connecter avec votre nouveau mot de passe pour accéder à votre espace membre."
                      );
                      res.redirect("/");
                    });
                  });
                });
              }
            }
          });
        });
      }
    });
});